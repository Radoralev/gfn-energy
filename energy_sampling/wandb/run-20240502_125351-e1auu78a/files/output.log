
  0%|                                                                                    | 0/25001 [00:00<?, ?it/s]
GFN(
  (t_model): TimeEncodingPIS(
    (t_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
    )
  )
  (s_model): StateEncodingPIS(
    (x_model): Linear(in_features=66, out_features=64, bias=True)
  )
  (joint_model): JointPolicyPIS(
    (model): Sequential(
      (0): GELU(approximate='none')
      (1): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (2): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (3): Linear(in_features=64, out_features=132, bias=True)
    )
  )
  (langevin_scaling_model): LangevinScalingModelPIS(
    (lgv_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (2): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  )
)
tensor([[-0.5246, -0.4571,  0.1821,  ..., -1.9762,  0.5600,  0.2870],
        [-0.8447, -0.6921,  0.8048,  ..., -1.3484, -0.2579, -1.5612],
        [-1.2525, -1.6068,  1.3103,  ...,  0.6499, -1.0489, -0.3733],
        ...,
        [-1.0650,  0.8292,  1.1915,  ...,  0.5825,  0.6297, -1.1523],
        [-0.9376, -0.2073,  1.6736,  ...,  0.2296, -1.0960,  1.3662],
        [-0.7383,  0.7385,  0.5524,  ..., -0.9428, -1.7078,  0.3801]],






  0%|▎                                                                          | 90/25001 [00:13<55:04,  7.54it/s]
tensor([[ 0.9200,  0.9461,  0.1812,  ..., -0.2205,  0.0569, -1.1692],
        [ 0.5562, -0.0025, -1.9412,  ..., -0.9993,  0.4360,  0.7488],
        [-1.7273, -0.1722, -0.9012,  ...,  0.9152, -1.0696, -1.2856],
        ...,
        [ 0.3991, -0.5673,  0.0462,  ...,  0.2044, -0.7531,  0.2211],
        [ 0.7864,  0.3399,  0.6645,  ...,  1.9099,  1.0678,  0.3037],
        [ 0.0532, -1.0240, -0.0152,  ...,  1.1155, -0.5523, -0.0283]],








  1%|▌                                                                       | 190/25001 [00:29<1:00:01,  6.89it/s]
tensor([[ 0.3446, -0.0505, -1.0708,  ..., -0.4948,  0.6682, -0.1570],
        [-0.5113, -0.9243, -0.2865,  ..., -2.2166, -1.2254, -0.8779],
        [ 1.2343,  0.8108, -0.3631,  ...,  1.2666,  1.7075,  0.1356],
        ...,
        [-1.7532, -0.9040, -0.8436,  ..., -0.8263, -1.3341,  0.4078],
        [ 1.8129, -0.8847,  0.2995,  ...,  0.3101,  0.8591, -1.7647],
        [-0.1527,  0.4116,  0.9581,  ..., -1.3832, -1.7622,  1.7704]],








  1%|▊                                                                         | 294/25001 [00:45<56:51,  7.24it/s]
tensor([[-0.5199,  0.2406, -1.3285,  ...,  1.0089, -0.5964, -0.9251],
        [ 2.7350, -0.3975, -0.4674,  ...,  0.3098, -0.7976,  0.7661],
        [-0.1619, -0.4611, -0.5137,  ...,  1.0856,  0.4615, -2.0058],
        ...,
        [ 0.5863,  0.4020,  1.2319,  ..., -1.3899, -0.1346,  2.0184],
        [ 0.3993,  0.5192, -0.5381,  ...,  1.8482, -0.1416, -0.2351],
        [-0.2240, -0.1356,  0.8487,  ...,  0.6119,  0.4495, -0.4951]],








  2%|█▏                                                                      | 393/25001 [01:01<1:02:58,  6.51it/s]
tensor([[-0.0052,  1.0700, -0.2384,  ...,  0.4049, -0.6317, -0.8388],
        [-0.4497,  0.2981,  0.9241,  ..., -0.3438, -0.2234,  1.5726],
        [ 0.0092, -1.1055, -0.1768,  ..., -0.4273,  1.0926, -0.8590],
        ...,
        [-0.4901, -0.7019, -0.0460,  ..., -0.5632,  0.5472, -0.0238],
        [ 0.4576, -0.3219,  0.1372,  ..., -0.3634,  0.7671,  0.1994],
        [-0.1628, -2.3084, -0.5373,  ..., -0.2397, -0.6907, -1.2113]],









  2%|█▍                                                                      | 500/25001 [01:19<1:09:05,  5.91it/s]
tensor([[-0.2339, -0.3686,  0.8045,  ..., -0.9916,  0.5070, -0.0247],
        [ 0.6598, -1.1428, -0.4801,  ..., -1.5023, -0.0171, -1.3741],
        [ 0.5514, -0.8112, -0.3925,  ..., -1.1388, -1.9596, -1.5853],
        ...,
        [-0.4724,  0.7232, -0.6668,  ...,  1.7354,  1.0311, -1.8572],
        [ 0.6593,  0.1778, -0.3485,  ..., -0.4730,  0.8446, -0.9357],
        [-0.8061, -0.2920, -1.6770,  ...,  0.3773,  0.0964, -1.2000]],









  2%|█▋                                                                      | 595/25001 [01:37<1:00:46,  6.69it/s]
tensor([[-1.0964,  2.4794, -0.6129,  ..., -0.8124, -1.0182, -1.2548],
        [ 0.5231,  0.0932, -0.9768,  ...,  0.2486, -0.6930, -0.4141],
        [-0.2307, -0.5882,  1.1889,  ..., -0.6736, -0.1547, -0.0580],
        ...,
        [-1.1682,  0.6387, -1.4066,  ..., -0.5108, -1.2857, -0.8789],
        [ 0.4761,  0.0344, -1.6348,  ..., -0.7050, -0.8465, -0.9100],
        [-1.0348,  0.8428,  0.1434,  ..., -0.7756,  0.7617, -0.6156]],








  3%|██                                                                        | 695/25001 [01:53<57:33,  7.04it/s]
tensor([[-0.6800,  1.1920,  1.0527,  ...,  0.3150, -0.6720,  1.8340],
        [-0.1639,  1.4266,  0.4346,  ..., -1.3214, -0.0564,  0.6633],
        [ 0.5017,  0.4027, -0.1066,  ...,  0.0695,  0.3601,  0.7592],
        ...,
        [-2.5971,  0.0759,  0.9085,  ...,  0.1453, -0.1893,  0.8907],
        [ 1.8039,  1.3012, -0.1931,  ..., -0.4492,  1.6011, -1.8639],
        [ 0.7663,  0.8732,  0.1297,  ...,  0.6405,  0.6881,  0.8428]],








  3%|██▎                                                                       | 795/25001 [02:09<53:26,  7.55it/s]
tensor([[-0.5265, -0.7341, -0.9470,  ..., -0.7229, -1.3184, -1.3268],
        [ 0.1068,  0.1769, -0.7193,  ...,  1.5413, -0.6907,  0.5075],
        [-0.8228,  1.1174,  0.1618,  ...,  0.3584,  0.7588, -0.2195],
        ...,
        [ 0.1094, -0.5169,  0.5655,  ...,  1.0662, -0.2031,  0.0480],
        [-0.9158, -0.8649,  1.9729,  ...,  0.8810,  0.2288,  1.5523],
        [-0.4799, -1.1455,  1.0482,  ...,  0.0364, -1.5705, -0.1163]],








  4%|██▌                                                                     | 895/25001 [02:26<1:01:42,  6.51it/s]
tensor([[-2.0457,  0.1811, -0.3485,  ..., -0.5723,  0.5653, -1.6404],
        [-0.4659,  0.9801,  0.4138,  ..., -0.1386,  0.3499,  0.7359],
        [-1.5669,  1.3951,  0.3171,  ..., -0.3102, -0.4895, -0.5173],
        ...,
        [-0.0742, -1.0957,  0.2755,  ..., -0.1646,  2.1518, -2.5064],
        [-1.6667,  0.9575, -1.6754,  ..., -1.0168,  0.8443,  0.8172],
        [ 0.5564, -0.1192, -1.1887,  ...,  0.0746, -0.0809,  0.9033]],








  4%|██▉                                                                       | 992/25001 [02:42<59:28,  6.73it/s]
tensor([[ 2.1177, -0.7111, -0.6333,  ...,  0.2782,  0.7829, -0.7141],
        [-0.2155, -1.8500,  2.0480,  ..., -1.0697,  1.9030,  0.8089],
        [ 0.0413,  1.3037, -1.9195,  ..., -1.3967,  0.6122,  0.4525],
        ...,
        [-0.6337, -0.1346, -0.0799,  ...,  2.1455,  0.1402,  1.3417],
        [ 1.7278,  1.1353,  0.1675,  ...,  0.0195,  1.1822,  0.6781],
        [-0.7350, -0.4778,  1.6490,  ..., -0.1572, -0.1725,  0.3844]],
  4%|██▊                                                                    | 1000/25001 [02:43<1:05:25,  6.11it/s]
Traceback (most recent call last):
  File "train.py", line 341, in <module>
    train()
  File "train.py", line 312, in train
    metrics.update(eval_step(eval_data, energy, gfn_model, final_eval=False))
  File "train.py", line 200, in eval_step
    'eval/log_Z_learned'] = log_partition_function(
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/evaluations.py", line 10, in log_partition_function
    log_r = log_reward_fn(states[:, -1])
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/energies/base_set.py", line 56, in log_reward
    return -self.energy(x)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/energies/alanine.py", line 73, in energy
    energy = self.bridge.evaluate(x)[0]
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/bgflow-0.3.0+19.gfbba56f-py3.8.egg/bgflow/distribution/energy/openmm.py", line 134, in evaluate
    energies, forces, new_positions, log_path_probability_ratio = self.context_wrapper.evaluate(
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/bgflow-0.3.0+19.gfbba56f-py3.8.egg/bgflow/distribution/energy/openmm.py", line 501, in evaluate
    state.getForces(asNumpy=True).value_in_unit(unit.kilojoule_per_mole / unit.nanometer)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/openmm/openmm.py", line 2900, in getForces
    if '_forcesNumpy' not in dir(self):
KeyboardInterrupt
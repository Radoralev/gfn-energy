GFN(
  (t_model): TimeEncodingPIS(
    (t_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
    )
  )
  (s_model): StateEncodingPIS(
    (x_model): Linear(in_features=66, out_features=64, bias=True)
  )
  (joint_model): JointPolicyPIS(
    (model): Sequential(
      (0): GELU(approximate='none')
      (1): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (2): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (3): Linear(in_features=64, out_features=132, bias=True)
    )
  )
  (langevin_scaling_model): LangevinScalingModelPIS(
    (lgv_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (2): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  )
)












































































































  5%|████▌                                                                                             | 1167/25001 [08:05<2:45:24,  2.40it/s]
Traceback (most recent call last):
  File "train.py", line 356, in <module>
    train()
  File "train.py", line 323, in train
    metrics['train/loss'] = train_step(energy, gfn_model, gfn_optimizer, i, args.exploratory,
  File "train.py", line 241, in train_step
    loss = bwd_train_step(energy, gfn_model, buffer, buffer_ls, exploration_std, it=it)
  File "train.py", line 282, in bwd_train_step
    loss = get_gfn_backward_loss(args.mode_bwd, samples, gfn_model, energy.log_reward,
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/utils.py", line 94, in get_gfn_backward_loss
    loss = bwd_tb(samples, gfn_model, log_reward, exploration_std)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/gflownet_losses.py", line 21, in bwd_tb
    states, log_pfs, log_pbs, log_fs = gfn.get_trajectory_bwd(initial_state, exploration_std, log_reward_fn)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/models/gfn.py", line 223, in get_trajectory_bwd
    pfs, flow = self.predict_next_state(s_, (1. - (i + 1) * self.dt), log_r)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/models/gfn.py", line 113, in predict_next_state
    t = self.t_model(t).repeat(bsz, 1)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/models/architectures.py", line 210, in forward
    t_emb = torch.cat([t_sin, t_cos], dim=-1)
KeyboardInterrupt
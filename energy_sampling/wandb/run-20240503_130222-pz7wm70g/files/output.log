GFN(
  (t_model): TimeEncodingPIS(
    (t_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
    )
  )
  (s_model): StateEncodingPIS(
    (x_model): Linear(in_features=66, out_features=64, bias=True)
  )
  (joint_model): JointPolicyPIS(
    (model): Sequential(
      (0): GELU(approximate='none')
      (1): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (2): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (3): Linear(in_features=64, out_features=132, bias=True)
    )
  )
  (langevin_scaling_model): LangevinScalingModelPIS(
    (lgv_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (2): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  )
)
  0%|                                                                                                               | 0/25001 [00:02<?, ?it/s]
Traceback (most recent call last):
  File "train.py", line 356, in <module>
    train()
  File "train.py", line 330, in train
    images = plot_step(energy, gfn_model, name)
  File "train.py", line 168, in plot_step
    fig, ax = energy.plot(samples)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/energies/alanine.py", line 122, in plot
    return plot_rama_traj(x, w, get_phi=True, model=self.bgmol_model)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/energies/alanine.py", line 32, in plot_rama_traj
    ax[0].hist2d(phi, psi, 60, weights=w, norm=LogNorm(), range=[plot_range, plot_range])
TypeError: 'Axes' object is not subscriptable
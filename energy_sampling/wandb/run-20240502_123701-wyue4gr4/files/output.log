GFN(
  (t_model): TimeEncodingPIS(
    (t_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
    )
  )
  (s_model): StateEncodingPIS(
    (x_model): Linear(in_features=66, out_features=64, bias=True)
  )
  (joint_model): JointPolicyPIS(
    (model): Sequential(
      (0): GELU(approximate='none')
      (1): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (2): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (3): Linear(in_features=64, out_features=132, bias=True)
    )
  )
  (langevin_scaling_model): LangevinScalingModelPIS(
    (lgv_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (2): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  )
)
{'train/loss': inf, 'eval/log_Z': tensor([nan, nan, nan,  ..., nan, nan, nan], device='cuda:0'), 'eval/log_Z_lb': tensor(nan, device='cuda:0'), 'eval/log_Z_learned': tensor(nan, device='cuda:0'), 'eval/mean_log_likelihood': tensor(nan, device='cuda:0'), '1-Wasserstein': 0.0, '2-Wasserstein': 0.0, 'Linear_MMD': 0, 'Poly_MMD': 0, 'RBF_MMD': 0, 'Mean_MSE': 0, 'Mean_L2': 0, 'Mean_L1': 0, 'Median_MSE': 0, 'Median_L2': 0, 'Median_L1': 0}
  0%|                                                                                    | 0/25001 [00:00<?, ?it/s]/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/bgflow-0.3.0+19.gfbba56f-py3.8.egg/bgflow/distribution/energy/openmm.py:513: UserWarning: Suppressed exception: Particle coordinate is NaN.  For more information, see https://github.com/openmm/openmm/wiki/Frequently-Asked-Questions#nan
/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/ot/lp/__init__.py:571: UserWarning: Problem unbounded
  check_result(result_code)
  0%|                                                                                    | 0/25001 [00:01<?, ?it/s]
Traceback (most recent call last):
  File "train.py", line 347, in <module>
    train()
  File "train.py", line 319, in train
    wandb.log(metrics, step=i)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/wandb/sdk/wandb_run.py", line 420, in wrapper
    return func(self, *args, **kwargs)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/wandb/sdk/wandb_run.py", line 371, in wrapper_fn
    return func(self, *args, **kwargs)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/wandb/sdk/wandb_run.py", line 361, in wrapper
    return func(self, *args, **kwargs)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/wandb/sdk/wandb_run.py", line 1838, in log
    self._log(data=data, step=step, commit=commit)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/wandb/sdk/wandb_run.py", line 1602, in _log
    self._partial_history_callback(data, step, commit)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/wandb/sdk/wandb_run.py", line 1474, in _partial_history_callback
    self._backend.interface.publish_partial_history(
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/wandb/sdk/interface/interface.py", line 596, in publish_partial_history
    item.value_json = json_dumps_safer_history(v)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/wandb/util.py", line 842, in json_dumps_safer_history
    return dumps(obj, cls=WandBHistoryJSONEncoder, **kwargs)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/json/__init__.py", line 234, in dumps
    return cls(
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/wandb/util.py", line 804, in default
    obj, compressed = maybe_compress_history(obj)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/wandb/util.py", line 705, in maybe_compress_history
    return wandb.Histogram(obj, num_bins=32).to_json(), True
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/wandb/sdk/data_types/histogram.py", line 77, in __init__
    self.histogram, self.bins = np.histogram(sequence, bins=num_bins)
  File "<__array_function__ internals>", line 200, in histogram
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/numpy/lib/histograms.py", line 780, in histogram
    bin_edges, uniform_bins = _get_bin_edges(a, bins, range, weights)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/numpy/lib/histograms.py", line 426, in _get_bin_edges
    first_edge, last_edge = _get_outer_edges(a, range)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/numpy/lib/histograms.py", line 323, in _get_outer_edges
    raise ValueError(
ValueError: autodetected range of [nan, nan] is not finite
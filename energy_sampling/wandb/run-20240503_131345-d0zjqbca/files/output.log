GFN(
  (t_model): TimeEncodingPIS(
    (t_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
    )
  )
  (s_model): StateEncodingPIS(
    (x_model): Linear(in_features=66, out_features=64, bias=True)
  )
  (joint_model): JointPolicyPIS(
    (model): Sequential(
      (0): GELU(approximate='none')
      (1): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (2): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (3): Linear(in_features=64, out_features=132, bias=True)
    )
  )
  (langevin_scaling_model): LangevinScalingModelPIS(
    (lgv_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (2): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  )
)
  0%|                                                                                                               | 0/10001 [03:05<?, ?it/s]
Traceback (most recent call last):
  File "train.py", line 356, in <module>
    train()
  File "train.py", line 327, in train
    metrics.update(eval_step(eval_data, energy, gfn_model, final_eval=False))
  File "train.py", line 220, in eval_step
    metrics['eval/mean_log_likelihood'] = 0. if args.mode_fwd == 'pis' else mean_log_likelihood(eval_data,
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/evaluations.py", line 24, in mean_log_likelihood
    states, log_pfs, log_pbs, log_fs = gfn.get_trajectory_bwd(data, None, log_reward_fn)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/models/gfn.py", line 223, in get_trajectory_bwd
    pfs, flow = self.predict_next_state(s_, (1. - (i + 1) * self.dt), log_r)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/models/gfn.py", line 104, in predict_next_state
    grad_log_r = torch.autograd.grad(log_r(s).sum(), s)[0].detach()
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/energies/base_set.py", line 56, in log_reward
    return -self.energy(x)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/energies/alanine.py", line 102, in energy
    energy = self._energy.energy(x)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/bgflow-0.3.0+19.gfbba56f-py3.8.egg/bgflow/distribution/energy/base.py", line 138, in energy
    return self._energy(*xs, **kwargs) / temperature
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/bgflow-0.3.0+19.gfbba56f-py3.8.egg/bgflow/distribution/energy/base.py", line 315, in _energy
    return _evaluate_bridge_energy(batch, self._bridge)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/torch/autograd/function.py", line 598, in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/bgflow-0.3.0+19.gfbba56f-py3.8.egg/bgflow/distribution/energy/base.py", line 220, in forward
    energy, force, *_ = bridge.evaluate(input)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/bgflow-0.3.0+19.gfbba56f-py3.8.egg/bgflow/distribution/energy/openmm.py", line 134, in evaluate
    energies, forces, new_positions, log_path_probability_ratio = self.context_wrapper.evaluate(
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/bgflow-0.3.0+19.gfbba56f-py3.8.egg/bgflow/distribution/energy/openmm.py", line 494, in evaluate
    state = self._openmm_context.getState(
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/openmm/openmm.py", line 12111, in getState
    state = _openmm.Context_getState(self, types, enforcePeriodicBox, groups_mask)
KeyboardInterrupt
GFN(
  (t_model): TimeEncodingPIS(
    (t_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
    )
  )
  (s_model): StateEncodingPIS(
    (x_model): Linear(in_features=66, out_features=64, bias=True)
  )
  (joint_model): JointPolicyPIS(
    (model): Sequential(
      (0): GELU(approximate='none')
      (1): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (2): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (3): Linear(in_features=64, out_features=132, bias=True)
    )
  )
  (langevin_scaling_model): LangevinScalingModelPIS(
    (lgv_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (2): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  )
)











































































































































































































































































































































































































































































































































































 26%|███████████████████████████▏                                                                           | 6600/25001 [18:42<52:09,  5.88it/s]
Traceback (most recent call last):
  File "train.py", line 343, in <module>
    train()
  File "train.py", line 314, in train
    metrics.update(eval_step(eval_data, energy, gfn_model, final_eval=False))
  File "train.py", line 216, in eval_step
    metrics.update(get_sample_metrics(samples, eval_data, final_eval))
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/evaluations.py", line 34, in get_sample_metrics
    return compute_distribution_distances(samples.unsqueeze(1), gt_samples.unsqueeze(1), final_eval)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/sample_metrics.py", line 279, in compute_distribution_distances
    w1 = wasserstein(a, b, power=1)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/sample_metrics.py", line 39, in wasserstein
    ret = ot_fn(a, b, M.detach().cpu().numpy(), numItermax=1e7)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/ot/lp/__init__.py", line 575, in emd2
    return f(b)
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/ot/lp/__init__.py", line 550, in f
    G, cost, u, v, result_code = emd_c(a, b, M, numItermax, numThreads)
KeyboardInterrupt

  0%|                                                                                    | 0/25001 [00:00<?, ?it/s]
GFN(
  (t_model): TimeEncodingPIS(
    (t_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
    )
  )
  (s_model): StateEncodingPIS(
    (x_model): Linear(in_features=66, out_features=64, bias=True)
  )
  (joint_model): JointPolicyPIS(
    (model): Sequential(
      (0): GELU(approximate='none')
      (1): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (2): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (3): Linear(in_features=64, out_features=132, bias=True)
    )
  )
  (langevin_scaling_model): LangevinScalingModelPIS(
    (lgv_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (2): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  )
)
tensor([[-0.9510, -0.0737, -0.0372,  ...,  0.7642, -1.4126, -0.3228],
        [ 3.1653,  0.2706,  0.1853,  ...,  0.0853, -0.7163, -0.3906],
        [-0.1999,  2.1036,  0.1347,  ...,  0.8947,  0.8506,  0.1343],
        ...,
        [-0.0810,  0.8011,  0.4641,  ..., -0.6347, -1.6259, -0.4350],
        [-0.8702,  1.6392,  0.6468,  ..., -0.5694, -0.4258,  0.1255],
        [-0.4895,  0.0993, -0.4370,  ..., -0.4107, -1.1016, -2.7832]],
       device='cuda:0')
tensor([[-0.5246, -0.4571,  0.1821,  ..., -1.9762,  0.5600,  0.2870],
        [-0.8447, -0.6921,  0.8048,  ..., -1.3484, -0.2579, -1.5612],
        [-1.2525, -1.6068,  1.3103,  ...,  0.6499, -1.0489, -0.3733],
        ...,
        [-1.0650,  0.8292,  1.1915,  ...,  0.5825,  0.6297, -1.1523],
        [-0.9376, -0.2073,  1.6736,  ...,  0.2296, -1.0960,  1.3662],
        [-0.7383,  0.7385,  0.5524,  ..., -0.9428, -1.7078,  0.3801]],
       device='cuda:0')
tensor([[-0.5246, -0.4571,  0.1821,  ..., -1.9762,  0.5600,  0.2870],
        [-0.8447, -0.6921,  0.8048,  ..., -1.3484, -0.2579, -1.5612],
        [-1.2525, -1.6068,  1.3103,  ...,  0.6499, -1.0489, -0.3733],
        ...,
        [-1.0650,  0.8292,  1.1915,  ...,  0.5825,  0.6297, -1.1523],
        [-0.9376, -0.2073,  1.6736,  ...,  0.2296, -1.0960,  1.3662],
        [-0.7383,  0.7385,  0.5524,  ..., -0.9428, -1.7078,  0.3801]],

  0%|                                                                         | 10/25001 [00:03<1:11:04,  5.86it/s]
{'train/loss': 4368.009765625, 'eval/log_Z': tensor([102.7812,  95.1348,  87.9023,  ...,  79.2725,  95.9707,  91.0801],
       device='cuda:0'), 'eval/log_Z_lb': tensor(93.6249, device='cuda:0'), 'eval/log_Z_learned': tensor(0.1000, device='cuda:0'), 'eval/mean_log_likelihood': tensor(-66.6618, device='cuda:0'), '1-Wasserstein': 8.418501393318175, '2-Wasserstein': 8.449957107119062, 'Linear_MMD': 10.572288513183594, 'Poly_MMD': 187.57810974121094, 'RBF_MMD': 0.35237884521484375, 'Mean_MSE': 0.15479770302772522, 'Mean_L2': 0.3934433924057249, 'Mean_L1': 0.32737672328948975, 'Median_MSE': 0.155975803732872, 'Median_L2': 0.3949377213344808, 'Median_L1': 0.3292301297187805}
tensor([[-0.6662,  0.4784,  0.2736,  ..., -1.5648, -0.3376,  1.4853],
        [-0.5402,  0.7628,  1.0009,  ..., -0.4948,  0.8951, -0.9030],
        [-0.4672,  0.4377,  0.0856,  ...,  2.0191,  0.4739,  1.3233],
        ...,
        [ 0.2386,  0.8281,  0.5684,  ..., -0.1887,  0.0753,  0.4529],
        [ 0.4923, -0.5927, -0.4352,  ...,  0.5147, -1.0549,  0.4642],
        [ 0.4544, -0.6301,  0.2078,  ...,  1.0366, -0.5874,  1.0200]],
       device='cuda:0')
tensor([[ 0.6235,  0.8180,  0.5104,  ..., -0.4902, -1.1450,  0.2727],
        [ 0.5158, -0.2175, -0.6632,  ...,  0.8391,  0.0756, -0.5590],
        [ 0.9893, -0.2929,  2.4145,  ..., -0.1944, -0.0089,  0.4609],
        ...,
        [ 1.6476, -0.6266, -0.4276,  ..., -1.3240, -1.3121, -0.4540],
        [ 1.3558,  0.7607, -0.3454,  ..., -0.0820,  0.6892, -0.1172],
        [-0.4190, -2.2826, -0.8503,  ...,  1.1636,  0.9823, -1.1039]],
       device='cuda:0')
tensor([[ 0.6318, -1.3798, -0.5316,  ...,  0.0557, -0.5652, -0.2219],
        [ 0.0402, -0.7710, -0.3060,  ...,  2.4767,  0.0843,  1.9792],
        [ 0.1001, -0.7503,  0.8493,  ..., -0.0677,  0.6363,  1.0695],
        ...,
        [-1.3006,  2.7152, -1.5725,  ...,  1.1266, -0.5179, -0.4156],
        [-0.0236, -0.8494,  0.9954,  ...,  1.3452, -0.7340, -0.4090],
        [ 0.5398, -0.0495, -0.9898,  ..., -0.2931,  1.9401,  0.9170]],
       device='cuda:0')
tensor([[-7.3483e-01, -1.4347e+00,  7.1329e-01,  ...,  1.6735e-01,
         -5.3491e-01,  9.8689e-01],
        [-2.3185e-03, -5.1186e-01, -1.3035e-01,  ..., -6.1670e-01,
         -2.7239e-01,  1.2190e+00],
        [-6.9020e-01,  1.3258e+00, -1.2075e+00,  ..., -2.3540e+00,
         -4.6187e-02, -3.6110e-01],
        ...,
        [ 2.0103e+00, -9.8830e-02,  8.5150e-01,  ...,  1.1268e-02,
          1.8483e-01, -9.7306e-02],
        [-1.1905e-01,  1.3016e+00, -7.7794e-01,  ...,  1.5571e+00,
          2.8793e-01,  1.6122e-01],
        [ 6.4867e-02,  2.3164e+00, -2.4286e+00,  ..., -3.0978e+00,
         -5.6246e-01,  8.8948e-01]], device='cuda:0')
tensor([[-0.2383,  1.2003,  0.5035,  ...,  0.4938, -0.4943,  0.1800],
        [-0.4278,  1.6247,  0.1445,  ..., -0.2901,  1.3916,  0.0626],
        [-0.1774, -0.4260,  0.0133,  ...,  1.1699,  1.9872, -0.4900],
        ...,
        [-0.7130, -0.3384,  0.8613,  ...,  0.5152,  2.1522,  1.5681],
        [ 0.6677, -0.0467,  1.1006,  ..., -0.8433, -0.6914,  1.9394],
        [-2.7808,  1.3332, -1.0527,  ...,  0.6102,  0.4452,  2.4463]],
       device='cuda:0')
tensor([[ 0.5198,  0.5060,  0.6047,  ..., -0.1187, -0.4785,  1.0722],
        [-0.9324, -0.1847, -0.8707,  ..., -0.1741, -2.0776, -0.2399],
        [-0.3419, -0.0848, -0.7453,  ..., -0.1952, -0.3650,  0.5172],
        ...,
        [ 0.5948, -1.9526, -1.6555,  ..., -0.1087, -1.3274,  1.5786],
        [-0.8849, -1.2341,  2.3525,  ..., -1.2463, -0.4991, -0.1225],
        [ 1.1312,  0.7763,  1.8198,  ..., -0.6929, -0.2768,  1.7808]],
       device='cuda:0')
tensor([[-0.7517,  1.2568,  0.3312,  ...,  0.8720, -1.7075,  0.4585],
        [-0.6890,  0.1026, -1.0184,  ...,  0.9289,  1.3559,  0.6760],
        [ 0.3944, -0.6106,  1.3138,  ..., -0.2256,  1.0758, -1.5809],
        ...,
        [ 0.2273,  0.3359, -0.6883,  ..., -0.1555,  0.2019, -0.2552],
        [-0.0187, -1.5531, -0.1363,  ...,  0.0720, -0.7462,  0.9029],
        [-0.8066,  0.2007, -1.2133,  ..., -1.3102,  0.5638,  0.0125]],
       device='cuda:0')
tensor([[ 1.2810, -0.5037, -0.1476,  ..., -0.9032, -0.5319,  0.7504],
        [-0.0673, -0.0189, -0.2843,  ...,  0.5212,  1.4820, -1.1155],
        [ 1.2904, -0.2275, -2.0992,  ...,  0.0524, -2.0646, -0.2072],
        ...,
        [-2.1844, -0.0454,  0.6003,  ...,  1.0334, -0.5198, -1.0214],
        [-0.6688,  0.6024, -0.4728,  ...,  0.7671, -0.1829,  0.3009],
        [ 1.8159, -0.3609, -0.9317,  ...,  0.1237, -0.7535,  0.3393]],
       device='cuda:0')
tensor([[ 0.3697, -0.1984,  1.2777,  ...,  0.8248, -1.9372, -0.7808],
        [ 0.0043,  0.4073, -1.0985,  ...,  1.2456, -1.0863,  0.3075],
        [ 1.5681, -1.2624,  0.3403,  ..., -0.3683,  0.8281,  0.0201],
        ...,
        [ 0.9184,  0.6788,  2.1164,  ..., -0.0348,  0.9701, -0.1871],
        [ 0.7497,  1.5783, -0.8089,  ...,  1.1428, -0.8534,  0.4002],
        [-0.9474,  0.2907,  0.6759,  ...,  0.4419,  2.0277,  0.9120]],
       device='cuda:0')
tensor([[ 0.1935,  0.7246, -1.6174,  ...,  1.1678, -1.7835,  2.2819],
        [-0.6934, -1.0677,  0.0707,  ...,  0.1468, -1.6405,  0.5286],
        [-1.3002,  2.0817,  0.0535,  ...,  0.6733, -0.6527, -0.8172],
        ...,
        [-0.4098, -0.7803, -0.4809,  ...,  1.7252,  0.0871,  0.1402],
        [ 0.2396,  2.0879,  0.8244,  ...,  0.9890, -1.5481, -0.9009],
        [ 0.6154, -1.2630,  0.1537,  ..., -1.3588,  0.6887,  0.5361]],
  0%|                                                                         | 11/25001 [00:03<2:20:01,  2.97it/s]
Traceback (most recent call last):
  File "train.py", line 342, in <module>
    train()
  File "train.py", line 308, in train
    metrics['train/loss'] = train_step(energy, gfn_model, gfn_optimizer, i, args.exploratory,
  File "train.py", line 237, in train_step
    loss = fwd_train_step(energy, gfn_model, exploration_std)
  File "train.py", line 246, in fwd_train_step
    loss = get_gfn_forward_loss(args.mode_fwd, init_state, gfn_model, energy.log_reward, coeff_matrix,
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/utils.py", line 81, in get_gfn_forward_loss
    loss = fwd_tb(init_state, gfn_model, log_reward, exploration_std, return_exp=return_exp)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/gflownet_losses.py", line 6, in fwd_tb
    states, log_pfs, log_pbs, log_fs = gfn.get_trajectory_fwd(initial_state, exploration_std, log_reward_fn)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/models/gfn.py", line 171, in get_trajectory_fwd
    noise = ((s_ - s) - self.dt * pf_mean) / (np.sqrt(self.dt) * (pflogvars / 2).exp())
KeyboardInterrupt
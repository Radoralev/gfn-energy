  0%|                                                                                                                     | 1/25001 [00:02<15:24:01,  2.22s/it]
Traceback (most recent call last):
  File "train.py", line 345, in <module>
    train()
  File "train.py", line 312, in train
    metrics['train/loss'] = train_step(energy, gfn_model, gfn_optimizer, i, args.exploratory,
  File "train.py", line 236, in train_step
    loss = bwd_train_step(energy, gfn_model, buffer, buffer_ls, exploration_std, it=it)
  File "train.py", line 264, in bwd_train_step
    local_search_samples, log_r = langevin_dynamics(samples, energy.log_reward, device, args)
  File "/home/radoslavralev/Documents/Thesis/gfn-diffusion/energy_sampling/langevin.py", line 31, in langevin_dynamics
    r_grad_original = torch.autograd.grad(log_reward(x).sum(), x)[0]
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/torch/autograd/__init__.py", line 412, in grad
    result = _engine_run_backward(
  File "/home/radoslavralev/miniconda3/envs/gfn-diffusion/lib/python3.8/site-packages/torch/autograd/graph.py", line 744, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
RuntimeError: element 0 of tensors does not require grad and does not have a grad_fn
GFN(
  (t_model): TimeEncodingPIS(
    (t_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
    )
  )
  (s_model): StateEncodingPIS(
    (x_model): Linear(in_features=66, out_features=64, bias=True)
  )
  (joint_model): JointPolicyPIS(
    (model): Sequential(
      (0): GELU(approximate='none')
      (1): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (2): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (3): Linear(in_features=64, out_features=132, bias=True)
    )
  )
  (langevin_scaling_model): LangevinScalingModelPIS(
    (lgv_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (2): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  )
)